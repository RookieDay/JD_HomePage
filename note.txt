1.favicon.ico 为网址打开后标签前面的那个小图，如果后来不显示了，可以清理缓存浏览记录试试。
  <link rel="shortcut icon" href=" favicon.ico" />
2.clearfix清除浮动的方法
	Clearfix的使用场景：
	a.父盒子要把所有的子盒子包裹住。
	b.父盒子是包裹正行的 div元素，需要前后进行清除浮动。
		.aside{
			height:300px;
			width:200px;
			float:left;
		}
		.main{
			height:300px;
			width:200px;
			float:left;
		}
		//类似包裹起来两个要浮动的元素
		.clearfix {
			display: table; /*  触发bfc，div具有的包裹性*/
		}
		//类似前后形成一堵墙 height:0 
		.clearfix:before, .clearfix:after {
			content: "";
			display: block;
			clear: both;
			height: 0;
			visibility: hidden;
		}
		//针对IE的处理
		.clearfix {
			_zoom: 1; 
		}
<div class="header">
	header
</div>
<div class="wrap clearfix">
	<div class="aside">aside</div>
	<div class="main">main</div>
</div>
<div class="footer">
	footer
</div>

3.Sublime Text3 设置行号
--Perferences->key Bindings-user
[
    {
        "keys": ["alt+l"],
        "command": "toggle_setting",
        "args":
        {
            "setting": "line_numbers"
        }
    }
]

4.小标签（s,del,em,I,u,ins…）经常使用做一些效果图(比如小三角)，因为他们轻量级 属性少
5.复合选择器的样式优先级核算： （注意权重 否则可能会失效）
	important > 行 > ID > 类 > 标签
	复合选择器 的优先级根据四个层次来算，首先是行内最高。
	其次，比较所有的id选择器的个数，个数多的为高。
	再次比较类选择器的个数，个数多的为高，
	最后比较标签选择器的个数，个数多的为高。
			.aside .aside-dt h1 {
				background-color: silver;
			}

			.aside #title-txt #id-title {
				background-color: yellow;
			}
			/*
			*       0，0，2， 1
			*       0，2，1， 0
			*       行内, ID, Class，标签，
			*/
			
6.text-indent: -9999px; 使文字不显示			
7.居中问题

盒子左右居中      Margin： 0 auto;
盒子上下居中      （父盒子给padding,  自盒子给margin。 定位）    

文字左右居中：   a.text-align:center;     b.paddign:  0   10px;
文字上下居中：   a.line-height:  盒子的高度。   b.。。。
			
8.	<input type="text">
	<button>搜索</button>			
	出现的结果之间有几个像素的距离，可以使用浮动解决这个问题
	input {
		float: left;
	}
	button {
		float: left;
	}	
9.模拟鼠标
Cursor :    pointer;             鼠标变成小手
Cursor :    text;                鼠标变成插入条光标
Cursor :    move;              鼠标变成四角箭头
Cursor :    default;             鼠标变成白色箭头

10.背景图不会撑开盒子 需要给定宽高
	.search-icon1 {
		top: 8px;
		left: 12px;
		width: 20px;
		height: 15px;
		background: url(../images/tel.png) no-repeat 0 -90px;
	}
	
   图片和文字会撑开盒子（文字比较特殊）
   在小标签（行内标签）的情况下：定位之后，不写left属性，默认的地方会出现的padding和a链接中的文字之后。	
   给了定位和浮动的行内元素可以给宽高   
11.圆角矩形
	border-radius:   1em;
	border-radius:   50%;
	border-radius:   宽高一半（px）;
	border-radius:   左上角  右上角  右下角  左下角;

12.清除浮动四种方法 (原因：父盒子高度为0，子盒子不占位置 ---> 清除浮动目的：让父盒子有高度。）
	a.clear: both ; 
	b.overflow: hidden; (缺点：超出盒子部分会隐藏)
	设置该属性以后会自动的触发块级格式化上下文BFC，它会直接作用在Box当中，把所有属于他的盒子框起来。
	BFC(block formatting context)
	c.单伪元素标签法	
		.clearfix:after {
			content: "";
			height: 0;
			visibility: hidden;
			overflow: hidden;
			display: block;
			clear: both;
		}
		.clearfix {
			*zoom:1;  /*兼容IE678*/
		}
	d.双伪元素标签法
		.clearfix:before,.clearfix:after {
			content: "";
			display: table;
		}
		.clearfix:after {
			clear: both;
		}
		.clearfix {
			*zoom:1; /*兼容IE678*/
		}
13.盒子居中
	左右居中：a.给盒子absolute定位，left=50%；子盒子出现在父盒子50%的位置
			   b.让盒子移动。 Margin-left: -自身宽度一半。
	上下居中：a.给盒子absolute定位，top=50%；
			   b.让盒子移动。 Margin-top: -自身高度一半。
   左右移动盒子
	Margin正值的情况下。指的是给盒子外边距。
	Margin负值的情况下。反方向移动盒子。（margin-left ： margin-top）
14.继承问题
	宽度会被继承
	行高会被继承
	高度不会被继承
	文字居中（text-align:center）可以被继承
15.鼠标放到div上，里面的a链接变颜色
	.shortcut-item:hover a {
				color: #C81623;
	}
16.Li和a的关系
	如果鼠标放到空白处a链接变色，说明a链接撑开的li 。
	如果鼠标放到空白处a链接不变色，说明li包含的a链接 。
17.层级（下面两个必须一起写）
		position: relative;
		z-index: 10;

18.界面跳转
	a链接如果不想跳转，方法如下
	 javascript:;             <a href=”javascript:;”></a>
	 javascript:void(0);      <a href=”javascript:void(0);”></a>

19.属性冲突问题
定位中的left和right不冲突。以left为准。
定位中的top和bottom不冲突。以top为准。

20.半透明
	opacity: 0.5；   他可以让盒子半透明。（缺点：就是内容跟着一起半透明）
	background：rgba(255,255,255,0.5);   C3透明度用法。
	background：rgba(255,255,255, .5);    C3透明度用法。

21.宽度继承是在加上padding值之后，和宽度的总和，等于父盒子的宽度。

22. 1号盒子里面假设一排放三个浮动的盒子a b c，如果width达到盒子宽度，c盒子可能就会掉下来，为了使得abc三个盒子在一排，
我们可以用一个2号盒子，width可能比1号盒子的大，这样我们把abc三个放入2号盒子里面 ，最多只会超出2号盒子的宽度，与1号盒子
没有关系，这样就可以保证三个盒子在一排显示。

23.层级
	层级和占不占位置没有关系。（relative本身就是站位置的）
	层级可以继承（拼爹）。（浮动和定位都是不能继承的）
	定位的盒子是最高的。（相比的是标准流和浮动的盒子。）
	只有定位的盒子才有层级。
	如果都有定位，后续的盒子会压住前面的盒子。
			
		<!DOCTYPE html>
		<html>
		<head lang="en">
			<meta charset="utf-8">
			<title></title>
			<style type="text/css">
				.box {
					width: 510px;
					height: 300px;
					margin: 100px auto;
				}
				.text {
					float: left;
					width: 100px;
					height: 200px;
					margin-left: -1px;
					border: 1px solid #ccc;
					position: relative;
				}
				.text:hover {
					border: 1px solid #f40;
					position: relative;
					/*z-index: 1;*/
				}
			</style>
		</head>
		<body>
			<div class="box">
				<div class="text"></div>
				<div class="text"></div>
				<div class="text"></div>
				<div class="text"></div>
				<div class="text"></div>
			</div>
		</body>
		</html>

24.绝对定位sample 
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>23绝对定位居中显示的demo.html</title>
		<style>
			* { padding: 0; margin: 0; }
			.banner {
				width: 400px;
				margin: 0 auto;
				background-color: teal;
				height: 400px;
				position: relative;
				
			}
			.slide-r {
				right: 0;
			}
			.slide-l, .slide-r {
				height: 30px;
				width: 20px;
				background-color: #ccc;
				border: 1px solid #000;
				color: #fff;
				position: absolute;
				top: 50%;
				margin-top: -15px;
			}

		</style>
	</head>
	<body>
		<div class="banner">
			<div class="slide-l">&lt;</div>
			<div class="slide-r">&gt;</div>
		</div>
	</body>
	</html>

25.
window.alert();    window可以省略（内置对象中只有window可以省略）
	缺点：1.不一样的浏览器显示方式不一样，兼容性不好。
		  2.比较突然。
	优点：直观，测试比较喜欢。（比较简单）

console.log/warn/error（）    console不能省略
	Console.log()        在控制台输出日志 （  控制台.日志()  ）                   
	Console.warn()       在控制台输出警告  (  控制台.警告()  )
	Console.error()       在控制台输入错误  (  控制台.错误()  )
	用的最多的就是console.log()。测试自己的代码。
	但是需要在控制台查看。

document.write（）          document也不能省略
	在文档中（网页中）输出内容（可以识别标签）。
	在案例中体现。


26.
	1.全局变量（成员变量）
		在方法外部声明的变量
		方法内部，没有加var关键字声明的变量
	2.局部变量
		方法内部，使用var声明的变量

		总结：凡是不适用var定义的变量，无论在哪儿定义的都是全局变量。
	3.隐式全局变量
	  不容易被发现的全局变量。（下面这个案例中的bcd）
		  var  a  =  0; 
		function fn(){     a = b = c = d = 1;         }

		1. var a=1,b=2,c=3;   这行代码的意思是，abc公用一个var.
		2. var a=1;b=1;c=1;   这行代码的意思是，var只给a。  
							   （；就是一行代码的结束。）

27.
隐藏盒子
	1.   display： none;             隐藏盒子。（不占位置）
	2.   visibility：hidden;           隐藏盒子。（占位置）
	3.   overflow: hidden;            隐藏超出盒子的部分。

显示盒子
	4.   display： block;             显示盒子。
	5.   visibility：visible；          显示盒子。

Js加载问题
	1.js的加载时和html同步。（顺序加载，加载到谁，就执行谁。）
	2.Css和html是不同步加载的。（先加载HTML，后加载css。）

解决办法
	1.js写在最后面。
	2.window.onload = function(){    js代码写在这里。       }
	
28.Js中的className问题
JS中的className就是css中或者html中的class属性。

29.
简单数据类型。
String        Number      Boolean        null       undefined
字符串       数字        布尔           空         未定义
“”         0123        true/false       自己       还没有定义

String类型转换
      1. 变量+ '''' 
	  2. String(变量)
      3. a++  a= a+1  不是一样的：a是String类型的时候后面的结果是a1;
Number类型
	  1、进制问题。
		 var result = 0xb;  //表示十六进制
		 var result1 = 020;//表示八进制

	  2、丢失精度。
		0.1+0.2 = 0.30000000000000004
	  3、数据类型转换
		1. x-1  x*1  x/1      变成Number类型（只有String类型）
		2. Number(变量)
		如果变量中包含字母，返回一个NaN.
Boolean类型
      1. 使用 !!（boolean值不变）
          false、undefined 、null、0、“” 为 false
          true、1、“somestring”、[Object] 为 true
	  2. Boolean();
	  
任何数据类型，都可以转换成布尔类型。

null和undefined（任何数字和undefined相加(运算)都是NaN）
null和undefined有最大的相似性。看看null == undefined的结果(true)也就更加能说明这点。不过相似归相似，还是有区别的，就是和数字运算时，10 + null结果为：10；10 + undefined结果为：NaN。
     
复杂数据类型。

对象（Object），函数(function)，数组（array），日期(Date)，正则...........
parseInt（）；取整
	1、取整      parseInt(只能放一个值);  收个字符必须为数字。Or:NaN.
	2、parseInt(变量，进制) ：这个方法能够让一个指定进制的数变为十进制。
       十进制值=parseInt(a,进制)  （你告诉我进制，我就敢给你转换成十进制）

        指定进制的值 = number(十进制).toString(指定的进制);
       （你给我一个十进制的值，在告诉我进制，我就能转换成那个进制的值）
通过这两个方法我们可以完成，任意进制的转换。
parseFloat（）; 取小数
只有一个用法就是：取值（取小数）。
	










1.favicon.ico 为网址打开后标签前面的那个小图，如果后来不显示了，可以清理缓存浏览记录试试。
  <link rel="shortcut icon" href=" favicon.ico" />
2.clearfix清除浮动的方法
	Clearfix的使用场景：
	a.父盒子要把所有的子盒子包裹住。
	b.父盒子是包裹正行的 div元素，需要前后进行清除浮动。
		.aside{
			height:300px;
			width:200px;
			float:left;
		}
		.main{
			height:300px;
			width:200px;
			float:left;
		}
		//类似包裹起来两个要浮动的元素
		.clearfix {
			display: table; /*  触发bfc，div具有的包裹性*/
		}
		//类似前后形成一堵墙 height:0 
		.clearfix:before, .clearfix:after {
			content: "";
			display: block;
			clear: both;
			height: 0;
			visibility: hidden;
		}
		//针对IE的处理
		.clearfix {
			_zoom: 1; 
		}
<div class="header">
	header
</div>
<div class="wrap clearfix">
	<div class="aside">aside</div>
	<div class="main">main</div>
</div>
<div class="footer">
	footer
</div>

3.Sublime Text3 设置行号
--Perferences->key Bindings-user
[
    {
        "keys": ["alt+l"],
        "command": "toggle_setting",
        "args":
        {
            "setting": "line_numbers"
        }
    }
]

4.小标签（s,del,em,I,u,ins…）经常使用做一些效果图(比如小三角)，因为他们轻量级 属性少
5.复合选择器的样式优先级核算： （注意权重 否则可能会失效）
	important > 行 > ID > 类 > 标签
	复合选择器 的优先级根据四个层次来算，首先是行内最高。
	其次，比较所有的id选择器的个数，个数多的为高。
	再次比较类选择器的个数，个数多的为高，
	最后比较标签选择器的个数，个数多的为高。
			.aside .aside-dt h1 {
				background-color: silver;
			}

			.aside #title-txt #id-title {
				background-color: yellow;
			}
			/*
			*       0，0，2， 1
			*       0，2，1， 0
			*       行内, ID, Class，标签，
			*/
			
6.text-indent: -9999px; 使文字不显示			
7.居中问题

盒子左右居中      Margin： 0 auto;
盒子上下居中      （父盒子给padding,  自盒子给margin。 定位）    

文字左右居中：   a.text-align:center;     b.paddign:  0   10px;
文字上下居中：   a.line-height:  盒子的高度。   b.。。。
			
8.	<input type="text">
	<button>搜索</button>			
	出现的结果之间有几个像素的距离，可以使用浮动解决这个问题
	input {
		float: left;
	}
	button {
		float: left;
	}	
9.模拟鼠标
Cursor :    pointer;             鼠标变成小手
Cursor :    text;                鼠标变成插入条光标
Cursor :    move;              鼠标变成四角箭头
Cursor :    default;             鼠标变成白色箭头

10.背景图不会撑开盒子 需要给定宽高
	.search-icon1 {
		top: 8px;
		left: 12px;
		width: 20px;
		height: 15px;
		background: url(../images/tel.png) no-repeat 0 -90px;
	}
	
   图片和文字会撑开盒子（文字比较特殊）
   在小标签（行内标签）的情况下：定位之后，不写left属性，默认的地方会出现的padding和a链接中的文字之后。	
   给了定位和浮动的行内元素可以给宽高   
11.圆角矩形
	border-radius:   1em;
	border-radius:   50%;
	border-radius:   宽高一半（px）;
	border-radius:   左上角  右上角  右下角  左下角;

12.清除浮动四种方法 (原因：父盒子高度为0，子盒子不占位置 ---> 清除浮动目的：让父盒子有高度。）
	a.clear: both ; 
	b.overflow: hidden; (缺点：超出盒子部分会隐藏)
	设置该属性以后会自动的触发块级格式化上下文BFC，它会直接作用在Box当中，把所有属于他的盒子框起来。
	BFC(block formatting context)
	c.单伪元素标签法	
		.clearfix:after {
			content: "";
			height: 0;
			visibility: hidden;
			overflow: hidden;
			display: block;
			clear: both;
		}
		.clearfix {
			*zoom:1;  /*兼容IE678*/
		}
	d.双伪元素标签法
		.clearfix:before,.clearfix:after {
			content: "";
			display: table;
		}
		.clearfix:after {
			clear: both;
		}
		.clearfix {
			*zoom:1; /*兼容IE678*/
		}
13.盒子居中
	左右居中：a.给盒子absolute定位，left=50%；子盒子出现在父盒子50%的位置
			   b.让盒子移动。 Margin-left: -自身宽度一半。
	上下居中：a.给盒子absolute定位，top=50%；
			   b.让盒子移动。 Margin-top: -自身高度一半。
   左右移动盒子
	Margin正值的情况下。指的是给盒子外边距。
	Margin负值的情况下。反方向移动盒子。（margin-left ： margin-top）
14.继承问题
	宽度会被继承
	行高会被继承
	高度不会被继承
	文字居中（text-align:center）可以被继承
15.鼠标放到div上，里面的a链接变颜色
	.shortcut-item:hover a {
				color: #C81623;
	}
16.Li和a的关系
	如果鼠标放到空白处a链接变色，说明a链接撑开的li 。
	如果鼠标放到空白处a链接不变色，说明li包含的a链接 。
17.层级（下面两个必须一起写）
		position: relative;
		z-index: 10;

18.界面跳转
	a链接如果不想跳转，方法如下
	 javascript:;             <a href=”javascript:;”></a>
	 javascript:void(0);      <a href=”javascript:void(0);”></a>

19.属性冲突问题
定位中的left和right不冲突。以left为准。
定位中的top和bottom不冲突。以top为准。

20.半透明
	opacity: 0.5；   他可以让盒子半透明。（缺点：就是内容跟着一起半透明）
	background：rgba(255,255,255,0.5);   C3透明度用法。
	background：rgba(255,255,255, .5);    C3透明度用法。

21.宽度继承是在加上padding值之后，和宽度的总和，等于父盒子的宽度。

22. 1号盒子里面假设一排放三个浮动的盒子a b c，如果width达到盒子宽度，c盒子可能就会掉下来，为了使得abc三个盒子在一排，
我们可以用一个2号盒子，width可能比1号盒子的大，这样我们把abc三个放入2号盒子里面 ，最多只会超出2号盒子的宽度，与1号盒子
没有关系，这样就可以保证三个盒子在一排显示。

23.层级
	层级和占不占位置没有关系。（relative本身就是站位置的）
	层级可以继承（拼爹）。（浮动和定位都是不能继承的）
	定位的盒子是最高的。（相比的是标准流和浮动的盒子。）
	只有定位的盒子才有层级。
	如果都有定位，后续的盒子会压住前面的盒子。
			
		<!DOCTYPE html>
		<html>
		<head lang="en">
			<meta charset="utf-8">
			<title></title>
			<style type="text/css">
				.box {
					width: 510px;
					height: 300px;
					margin: 100px auto;
				}
				.text {
					float: left;
					width: 100px;
					height: 200px;
					margin-left: -1px;
					border: 1px solid #ccc;
					position: relative;
				}
				.text:hover {
					border: 1px solid #f40;
					position: relative;
					/*z-index: 1;*/
				}
			</style>
		</head>
		<body>
			<div class="box">
				<div class="text"></div>
				<div class="text"></div>
				<div class="text"></div>
				<div class="text"></div>
				<div class="text"></div>
			</div>
		</body>
		</html>

24.绝对定位sample 
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>23绝对定位居中显示的demo.html</title>
		<style>
			* { padding: 0; margin: 0; }
			.banner {
				width: 400px;
				margin: 0 auto;
				background-color: teal;
				height: 400px;
				position: relative;
				
			}
			.slide-r {
				right: 0;
			}
			.slide-l, .slide-r {
				height: 30px;
				width: 20px;
				background-color: #ccc;
				border: 1px solid #000;
				color: #fff;
				position: absolute;
				top: 50%;
				margin-top: -15px;
			}

		</style>
	</head>
	<body>
		<div class="banner">
			<div class="slide-l">&lt;</div>
			<div class="slide-r">&gt;</div>
		</div>
	</body>
	</html>

25.
window.alert();    window可以省略（内置对象中只有window可以省略）
	缺点：1.不一样的浏览器显示方式不一样，兼容性不好。
		  2.比较突然。
	优点：直观，测试比较喜欢。（比较简单）

console.log/warn/error（）    console不能省略
	Console.log()        在控制台输出日志 （  控制台.日志()  ）                   
	Console.warn()       在控制台输出警告  (  控制台.警告()  )
	Console.error()       在控制台输入错误  (  控制台.错误()  )
	用的最多的就是console.log()。测试自己的代码。
	但是需要在控制台查看。

document.write（）          document也不能省略
	在文档中（网页中）输出内容（可以识别标签）。
	在案例中体现。


26.
	1.全局变量（成员变量）
		在方法外部声明的变量
		方法内部，没有加var关键字声明的变量
	2.局部变量
		方法内部，使用var声明的变量

		总结：凡是不适用var定义的变量，无论在哪儿定义的都是全局变量。
	3.隐式全局变量
	  不容易被发现的全局变量。（下面这个案例中的bcd）
		  var  a  =  0; 
		function fn(){     a = b = c = d = 1;         }

		1. var a=1,b=2,c=3;   这行代码的意思是，abc公用一个var.
		2. var a=1;b=1;c=1;   这行代码的意思是，var只给a。  
							   （；就是一行代码的结束。）

27.
隐藏盒子
	1.   display： none;             隐藏盒子。（不占位置）
	2.   visibility：hidden;           隐藏盒子。（占位置）
	3.   overflow: hidden;            隐藏超出盒子的部分。

显示盒子
	4.   display： block;             显示盒子。
	5.   visibility：visible；          显示盒子。

Js加载问题
	1.js的加载时和html同步。（顺序加载，加载到谁，就执行谁。）
	2.Css和html是不同步加载的。（先加载HTML，后加载css。）

解决办法
	1.js写在最后面。
	2.window.onload = function(){    js代码写在这里。       }
	
28.Js中的className问题
JS中的className就是css中或者html中的class属性。

29.
简单数据类型。
String        Number      Boolean        null       undefined
字符串       数字        布尔           空         未定义
“”         0123        true/false       自己       还没有定义

String类型转换
      1. 变量+ '''' 
	  2. String(变量)
      3. a++  a= a+1  不是一样的：a是String类型的时候后面的结果是a1;
Number类型
	  1、进制问题。
		 var result = 0xb;  //表示十六进制
		 var result1 = 020;//表示八进制

	  2、丢失精度。
		0.1+0.2 = 0.30000000000000004
	  3、数据类型转换
		1. x-1  x*1  x/1      变成Number类型（只有String类型）
		2. Number(变量)
		如果变量中包含字母，返回一个NaN.
Boolean类型
      1. 使用 !!（boolean值不变）
          false、undefined 、null、0、“” 为 false
          true、1、“somestring”、[Object] 为 true
	  2. Boolean();
	  
任何数据类型，都可以转换成布尔类型。

null和undefined（任何数字和undefined相加(运算)都是NaN）
null和undefined有最大的相似性。看看null == undefined的结果(true)也就更加能说明这点。不过相似归相似，还是有区别的，就是和数字运算时，10 + null结果为：10；10 + undefined结果为：NaN。
     
复杂数据类型。

对象（Object），函数(function)，数组（array），日期(Date)，正则...........

parseInt（）；取整
	1、取整      parseInt(只能放一个值);  收个字符必须为数字。Or:NaN.
	2、parseInt(变量，进制) ：这个方法能够让一个指定进制的数变为十进制。
       十进制值=parseInt(a,进制)  （你告诉我进制，我就敢给你转换成十进制）

        指定进制的值 = number(十进制).toString(指定的进制);
       （你给我一个十进制的值，在告诉我进制，我就能转换成那个进制的值）
通过这两个方法我们可以完成，任意进制的转换。
parseFloat（）; 取小数
只有一个用法就是：取值（取小数）。
	
30.
	变量声明提升
	就是指：在函数中使用变量在定义变量之前，一定会出现变量声明提升。
		1.function 函数作用域里的变量会遮盖了上层作用域变量。（就近原则）
		2.在function作用域内，变量的声明被提升了，但是没有提升变量值。

<script>
    var num = 10;
    fun();
    function fun(){
        console.log(num);
        var num = 20;
    }
 </script>
输出的是undefined 因为使用的是函数里面的变量  就近原则 变量提升

31.函数重点
	1．函数不调用不执行。
	2．函数在加载的时候，只加载函数名，不加载函数体。
	3．函数名和函数名（）他们两个不一样。
	（函数名指的是函数体，函数()调用）

32.
三种定义函数的方式：
	a.关键字function来构造
	b.函数直接量形式
	c.通过Function构造函数形式定义函数
	a.
		function fn() {
			alert(1);
		}
		fn();  //这句话可以写在前面

	b.
		var fn2 = function () {
			alert(2);
		}
		fn2(); //这句话不能写在前面

	c.
		var fn3 = new Function("alert(3)");
		fn3();	//这句话不能写在前面
		
	1.第一种声明，使用函数位置没有顺序问题
	2.后两种，必须写到函数声明的后面

f1();
console.log(c);  -->9
console.log(b);  -->9
console.log(a);  not defined

function f1(){
	var a = b = c = 9; 这里的a是局部变量 b/c是全局变量 因为它们前面没有var
	console.log(a) -->9
	console.log(b) -->9
	console.log(c) -->9
}

33. 函数参数
	形参（形式上参与运算的变量）
		如果想要用到参数，必须用形参来给实参占位置。否则无法调用。
	实参（实际上参与运算的变量）
		参数如果没有被使用：传或者不传参数，不影响函数执行。
		参数必须全部被使用的情况下：
		1．实参少于形参，报错。
		2．实参等于形参，执行。
		3．实参大于形参，执行
	查询函数参数
		1．查询形参个数
			a)	我们用函数名的形式来查询形参。   函数名.length
			b)	单独打印函数名：函数体。    
			c)	 函数名 == 函数体！        函数名()  == 调用函数！
		2．查询实参个数
			a)	我们用一个对象的方法来查询实参。（arguments.length）
			b)	只有函数中才有arguments。
			c)	arguments他其实就是一个数组，所在函数实参的数组。

34.
获得标签内部内容
	如果一个标签有value属性，我们就用  :    标签.value        获得。
	如果一个标签没有value属性，我们就用  :  标签.innerHTML   获得。
this
	函数的调用者。(要在函数内部使用)
label  for  id
	<label for="inp">请输入一个名人：</label>
	<input type="text" id="inp"/>
	label标签使用：点击label内容,插入条光标会调到for指定的id的标签中。(为他人做嫁衣，为for指定的id所在的标签)

35.新事件
获得焦点事件：    onfocus           获得插入条光标会触动这个事件
失去焦点事件：    onblur            失去插入条光标会触动这个事件。

<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
    <style>
        .box {
            width: 260px;
            margin: 200px auto;
        }
        .box input {
            width: 200px;
            height: 40px;
            padding-left: 16px;
            background: url(images/left.jpg) no-repeat;
            float: left;
            border: 0;
            outline-style: none;
            color: #ccc;
        }
        .box button {
            width: 42px;
            height: 40px;
            background: url(images/right.jpg) no-repeat;
            float: left;
            border: 0;
            outline-style: none;
            cursor: pointer;
        }


    </style>
</head>
<body>
    <div class="box">
        <input type="text" id="inp" value="今日特价优惠85折"/>
        <button></button>
    </div>
    <script>
        //需求：点击input,获取光标，文字消失。如果没有文字的情况下，点击外面文字显示。
                //技术点：如何让文字消失。   input标签.value = "";
                //       获得焦点事件/失去焦点事件    onfocus/onblur
        //步骤
        //1.获取事件源
        //2.绑定事件
        //3.书写事件驱动程序
            //(1).判断如果文字为今日特价优惠85折，文字消失，否则文字不能变。
        //1.获取事件源
        var ccc = document.getElementById("inp");
        //2.绑定事件
        ccc.onfocus = function () {
            //3.书写事件驱动程序
            //(1).判断如果文字为今日特价优惠85折，文字消失，否则文字不能变。
            if(ccc.value == "今日特价优惠85折"){
                ccc.value = "";
            }

        }
        //2.绑定事件
        ccc.onblur = function () {
            //3.书写事件驱动程序
            //(1).判断如果文字为今日特价优惠85折，文字消失，否则文字不能变。
            if(ccc.value == ""){
                ccc.value = "今日特价优惠85折";
                ccc.style.color = "#ccc";
            }else{
                ccc.style.color = "#333";
            }
//            else{
//                ccc.value = ccc.value;
//            }
        }
    </script>
</body>
</html>

36.
内部定义的方法（获得焦点方法，全选方法）focus()/select()
	alert();          调用者    window
	parseInt()        调用者    window
	parseFloat()      调用者    window
	focus() / select()    所有标签。（可以输入内容的所有标签）
	focus() ： 调用者是所有可以输入文本的标签。
			 使用方法：   标签.focus();   标签获得插入条光标。
	select() ： 调用者是所有可以输入文本的标签。
			  使用方法：   标签.select();   标签内部文本全部被选定。

	输入事件
	oninput    输入内容的时候触动这个事件（输入和删除都会触动这个事件）   
	onpropertychange    兼容IE678。
37.
isNaN();      调用者：window.    有参数；  有返回值（true或false）
             true: 符合一个标准：不是一个数字的标准！（不是数字）
             false：不符合一个标准：不是一个数字的标准！(是数字)

38.
直接alert();如果是undefined就不是关键字，可以用。
如果报错，或者直接弹出对象或者方法，那么就是关键字。
39.数组定义
var  arr =  [1,2,3 ]; 
var arr2 = new Array(“a,b,c”);



40.所有的数据类型名字都是用String定义的（面试用）
var x = [‘abcde’ ,  123456]; 
var y = typeof  typeof  x[1]; ----> "string" (var y = typeof(123456) var z = typeof(z) z-->string)



41.
document.getElementsByTagName();   根据标签名获得标签。
这个方法获得的标签被封装到了一个数组中被返回。
调用者：document。   有参数。   有返回值。（数组，标签数组）
   哪怕只有一个标签，也返回一个数组，装着这个标签。
接收返回值的时候，必须用数组接收。

调用者还可以是标签。如果是标签，那么将在这个标签下，寻找想要查找的标签。（缩小范围）

//技术点：如何去顶一个input有没有被选定。
           //看标签中有没有checked.
           //***在js当中如果标签的checked属性为true那就为选定，为false为没选定。

42.
排他性是指一种物品具有可以阻止其他人使用该物品的特性。
排他性思想：
在程序中但凡是遇到只让自己怎么样，不让别人怎么样的效果，都要用到排他性思想。而排他性思想往往需要使用到for循环进行群控制。
步骤：一定是先排他，再控制自己。

43.对this的理解：重要
	<!DOCTYPE html>
	<html>
	<head lang="en">
		<meta charset="UTF-8">
		<title></title>
		<style>
			body {
				padding: 100px;
			}
			button {
				margin: 10px;
			}
			.current {
				background-color: yellow;
			}
		</style>
		<script>
			window.onload = function () {

				//需求：鼠标放到按钮上，让这个按钮变亮，其他的不能变亮。（pink）
						//技术点：从今天开始，我们用js控制样式，只能控制类名。
				//步骤
				//1.获取事件源
				//2.绑定事件
				//3.书写事件驱动程序
					//(1).让所有的盒子都变暗。
					//(2).让触动事件的盒子变亮。
				//1.获取事件源
				var arrBtn = document.getElementsByTagName("button");

				//遍历按钮数组，获得每一个数组中的按钮
				// 第一个for循环：为了给按钮绑定事件而生
				for(var i=0;i<arrBtn.length;i++){

					//2.绑定事件
					arrBtn[i].onmouseover = function () {
						//3.书写事件驱动程序(排他思想)
							//(1).让所有的盒子都变暗。(干掉所有人)
							//第二个for循环：为了干掉所有人而生
							for(var j=0; j<arrBtn.length;j++){
								arrBtn[j].className = "";
							}
							//(2).让触动事件的盒子变亮。(剩下我一个)
							//为什么没有用arrBtn[i],此时的i已经变成5了
							this.className = "current";
					}
				}
			}
		</script>
	</head>
	<body>
	<button class="current">按钮1</button>
	<button>按钮2</button>
	<button>按钮3</button>
	<button>按钮4</button>
	<button>按钮5</button>
	</body>
	</html>

44.属性绑定（重点！！！） 看tab.html的sample
	1.只有复杂数据类型能够绑定属性，绑定完毕能够随时获得。
	2.既能绑定复杂数据类型，又能绑定简单数据类型。

我们可以人为得到为一些复杂数据类型绑定属性。
什么是属性绑定：就是在原有的变量（复杂数据类型）上加一个点外加一个变量名，在给这个属性赋值，就可以做到一个变量绑定属性。
属性绑定可以在一定程度上，代替我们传递参数。

次知识点为了解内容：
（前提：必须是复杂数据类型才能绑定属性）
属性绑定不只能绑定简单数据类型，还能绑定复杂数据类型。
<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
    <style>
        * {
            margin: 0;
            padding: 0;
        }
        .box {
            width: 300px;
            height: 270px;
            margin: 50px auto;
            overflow: hidden;
        }
        ul {
            list-style: none;
            width: 330px;
            height: 30px;
            /*overflow: hidden;*/
        }
        ul li {
            float: left;
            width: 60px;
            height: 30px;
            font: 400 20px/30px "simsun";
            background-color: #ccc;
            text-align: center;
            cursor: pointer;
        }

        .box2 {
            height: 240px;
            background-color: pink;
            /*display: none;*/
        }
        .box .show {
            display: block;
        }
        .current {
            background-color: pink;
        }
        .hidden-div {
            display: none;
        }

    </style>
</head>
<body>

<div class="box">
    <ul id="ul1">
        <li class="current">男装</li>
        <li>女装</li>
        <li>童装</li>
        <li>孕装</li>
        <li>便装</li>
    </ul>
    <div id="div1">
        <div class="box2 show">我是男装内容区</div>
        <div class="box2">我是女装内容区</div>
        <div class="box2">我是童装内容区</div>
        <div class="box2">我是孕装内容区</div>
        <div class="box2">我是便装内容区</div>
    </div>
</div>

<script>
    //需求：鼠标放到li上，li要变色，而且内容应该显示相应得到区域。
            //技术点：随着完成代码的间接性，代码的复杂程度逐步提高。
    //步骤
    //1.获取事件源
    //2.绑定事件
    //3.书写事件驱动程序
        //(1).利用排他思想，让li变色。



    //1.获取事件源
    var div1 = document.getElementById("div1");
    var ul1 = document.getElementById("ul1");
    var arrLi = ul1.getElementsByTagName("li");
    var arrDiv = div1.getElementsByTagName("div");

    for(var i=0;i<arrLi.length;i++){
        //2.绑定事件
        arrLi[i].aaa = i;  //属性绑定 保存i值 下面会使用 理解为给他外挂了一个属性 Json存储

        arrLi[i].onmouseover = function () {
            //3.书写事件驱动程序
                //(1).利用排他思想，让li变色。
            for(var j=0;j<arrLi.length;j++){
                arrLi[j].className = "";
//                arrDiv[j].className = "hidden-div";  基础好的同学可以研究一下
                arrDiv[j].style.display = "none";
            }

            this.className = "current";
//            arrDiv[this.aaa].className += "box2 hidden-div show"
//            arrDiv[this.aaa].className = "box2 show"
            arrDiv[this.aaa].style.display = "block";
        }
    }
</script>
</body>
</html>


45. 
	select标签本身的value值给了下面的标签option，所以option的value值就是select的value值。
有selected这个属性的option标签是被选定或默认的标签。
	onchange事件
这个事件是在value值被更的时候触发的。一旦value值被更改就会触动这个事件。

46.oninput/onblur/onchange   区别与联系
	oninput: 输入事件。    只要输入或删除字母或数字都会触动这个事件。
	onblur: 失去焦点事件。 只要标签失去焦点，就会触动这个事件。
	onchange: 改变事件。   只要事件源的值被改变，就会触动这个事件。
     有一个input，值:    请输入...
	1.  点击之后离开。     2.输入一个文字就离开。 
    3.  输入一个文字在删除他在离开。

47.数组操作
	push、unshift(添加)
	shift、pop（删除）
	concat      （链接）
	join、split（转换）

数组的元素添加   （push/unshift）
	push     学习一个方法，从四部分开始
		调用者：数组本身。    有参数。    有返回值。
		从调用者数组的最后面插入一个元素，最后返回新数组的长度。
		新数组的长度 = 数组.push( 新元素 ); 从数组后面插入。
    unshift     学习一个方法，从四部分开始
		调用者：数组本身。    有参数。    有返回值。
		从调用者数组的最前面插入一个元素，最后返回新数组的长度。
		新数组的长度 = 数组.unshift( 新元素 ); 从数组前面插入。

数组的元素删除
	pop 学习一个方法，从四部分开始
		调用者：数组本身。    没有参数。    有返回值。
		从调用者数组的最后面删除最后一个元素，最后返回被删除的元素。
		  被删除的元素 = 数组.pop(); 从数组最后面删除一个元素。
	shift 学习一个方法，从四部分开始
		调用者：数组本身。    没有参数。    有返回值。
		从调用者数组的最前面删除第一个元素，最后返回被删除的元素。
		被删除的元素 = 数组.shift(); 从数组最前面删除第一个元素。

数组的链接   concat学习一个方法，从四部分开始
		调用者：任何数组。    有参数。    有返回值。
		从调用者数组的最后面链接另一个数组，最后返回一个新数组（原数组不变）。
		新数组 = 数组1.concat( 数组2 ); 把数组2链接到数组1上，返回一个新数组

数组和字符串之间的转换    join/split
		join 把数组变成字符串
			作用是将数组各个元素是通过指定的分隔符进行连接成为一个字符串。
			调用者：数组本身。    有没有参数都行。    有返回值（string）。
			把调用者数组中的元素按照参数链接成一个字符串，如果没有参数用逗号链接。
			字符串 = 数组.join(可选); 数组中的元素链成字符串。

				1．参数可选。指定要使用的分隔符。
				2．如果省略该参数，则使用逗号作为分隔符。
				3．如果想让数组中元素无缝链接，用“”；
				4．如果你使用空格分隔，那么他真的给你用空格分隔啊！！！“”
		split 把字符串变成数组。   
			split() 方法用于把一个字符串分割成字符串数组
			调用者：字符串。    有没有参数都行。    有返回值（Array）。
			把字符串按固定的方式分割成一个数组，参数1用什么字符分割，参数2数组最大长度。
			数组 = 字符串.split(用什么分，分割成功后数组最大长度); 把字符串分割成数组。

			参数 1。指定要使用的分隔符。
			参数2，可选。该参数可指定返回的数组的最大长度。
			数组切割完成后，用于切割的字符串不会出现在数组元素当中。（卸磨杀驴）
			如果是空字符串，会把每一个字符全部当做数组中的元素来截取。

48.DOM
HTML的组成部分为节点（ Node ）
	在HTML当中一切都是节点……
	由结构图中我们可以看到，整个文档就是一个文档节点。
	每一个HMTL标签都是一个元素节点（标签）。
	标签中的文字则是文字节点。（文本）
	标签的属性是属性节点。（属性）
DOM节点的获得
	操作节点，必须首先找到该元素。有三种方法来做这件事：
	通过 id 找到 HTML 元素
	document.getElementById("demo");
	通过标签名找到 HTML 元素
	document.getElementsByTagName("div");
	通过类名找到 HTML 元素
	document.getElementsByClassName("a");
	通过类名查找 HTML 元素在 IE 5,6,7,8 中无效
	标签  =   document.getElementById("demo"); 通过ID获得标签
	他的返回值是一个标签，可以直接使用。获得属性值，设置属性。
	标签数组= document.getElementsByTagName("div"); 通过标签名获得标签数组
	标签数组= document.getElementsByClassName("a");通过类名获得标签数组
	他们两个的返回值是标签数组，习惯性是遍历之后再使用。
	特殊情况：数组中的值只有1个。      
		   document.getElementsByTagName("div")[0];取数组中第一个元素
		   document.getElementsByClassName("a")[0];取数组中第一个元素


49. 判断浏览器是否支持这个方法 if(document.getElementsByClassName)
<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
    <style>
        div {
            width: 100px;
            height: 100px;
            background-color: pink;
        }
        .current {
            background-color: yellow;
        }
        
    </style>
</head>
<body>
<div></div>
<div class="box clearfix box1"></div>
<div></div>
<div class="box w fl"></div>
<div></div>
<script>
    var arrBox = fn("box");
    for(var i=0;i<arrBox.length;i++){
        arrBox[i].className = "box current";
    }
    //需求：如果类名为多个，也要能够对比到类名中的每一个，只要有一个和传递的值相等，就复合标准
           //兼容多个类名
    //步骤：
        //以前比较的是整个类名，现在要分别比较每一而
    //1.把类名按照空格转换成数组
    //2.遍历数组，比较数组中的每一个元素
    //3.只有一个和传递的值相等，就把这个标签添加到新数组中
    //定义一个通过类名可以获得标签数组的方法。（兼容IE678）
    function fn(str){
        //判断浏览器是否支持这个方法
        if(document.getElementsByClassName){
            return document.getElementsByClassName(str);
        }else{
            //获得所有标签
            var allNodes = document.getElementsByTagName("*");
            var arr = [];
            //遍历所有标签数组
            for(var i=0;i<allNodes.length;i++){
                //对每一个标签的类名进行判断
                //1.把类名按照空格转换成数组
                var arrClassName = allNodes[i].className.split(" ");
                //2.遍历数组，比较数组中的每一个元素
                for(var j=0;j<arrClassName.length;j++){
                    //3.只有一个和传递的值相等，就把这个标签添加到新数组中
                    if(arrClassName[j] == str){
                        //如果相等，添加到新数组
                        arr.push(allNodes[i]);
                    }
                }
            }
            //返回新数组
            return arr;
        }
    }
</script>
</body>
</html>

50.DOM 访问关系
节点的访问关系，是以属性的方式存在的。
DOM的节点并不是孤立的，因此可以通过DOM节点之间的相对关系对它们进行访问

51.
父节点  （ parentNode ）   
	调用者就是节点。一个节点只有一个父节点。调用方式就是节点.parentNode.

兄弟节点
	Sibling就是兄弟的意思。
	Next：下一个的意思。
	Previous:前一个的意思。
	nextSibling：调用者是节点。IE678中指下一个元素节点（标签）。在火狐谷歌IE9+以后都指的是下一个节点（包括空文档和换行节点）。
	nextElementSibling：在火狐谷歌IE9都指的是下一个元素节点。
	总结：在IE678中用nextSibling，在火狐谷歌IE9+以后用nextElementSibling
	下一个兄弟节点=节点.nextElementSibling || 节点.nextSibling

	previousSibling：调用者是节点。IE678中指前一个元素节点（标签）。在火狐谷歌IE9+以后都指的是前一个节点（包括空文档和换行节点）。
	previousElementSibling：在火狐谷歌IE9都指的是前一个元素节点。
	总结：在IE678中用previousSibling，在火狐谷歌IE9+以后用previousElementSibling。
	下一个兄弟节点=节点.previousElementSibling|| 节点.previousSibling

单个子节点
	firstChild：调用者是父节点。IE678中指第一个子元素节点（标签）。在火狐谷歌IE9+以后都指的是第一个节点（包括空文档和换行节点）。
	firstElementChild:在火狐谷歌IE9都指的第一个元素节点。
	第一个子节点=父节点.firstElementChild || 父节点.firstChild

lastChild:调用者是父节点。IE678中指最后一个子元素节点（标签）。在火狐谷歌IE9+以后都指的是最后一个节点（包括空文档和换行节点）。
lastElementChild：在火狐谷歌IE9都指的最后一个元素节点。

所有子节点
	childNodes：它是标准属性，它返回指定元素的子元素集合，包括HTML节点，所有属性，文本节点   （他还是W3C的亲儿子 ）
	火狐 谷歌等高本版会把换行也看做是子节点
	nodeType==1时才是元素节点(标签)
		  nodeType  ==  1  表示的是元素节点   记住   元素就是标签
		  nodeType  ==  2  表示是属性节点   了解
		  nodeType  ==  3  是文本节点   了解
	子节点数组 = 父节点.childNodes;   获取所有节点。
	children：非标准属性，它返回指定元素的子元素集合。
	但它只返回HTML节点，甚至不返回文本节点，虽然不是标准的DOM属性，但它和innerHTML方法一样，得到了几乎所有浏览器的支持。
	children在IE6/7/8中包含注释节点 
	在IE678中，注释节点不要写在里面。
	子节点数组 = 父节点.children;   用的最多。
知识补充
	节点自己.parentNode.children[index];随意得到兄弟节点。

	作为了解内容：
	function siblings(elm) {
			var a = [];
			var p = elm.parentNode.children;
			for(var i =0,pl= p.length;i<pl;i++) {
				if(p[i] !== elm) a.push(p[i]);
			}
			return a;
	}
	定义一个函数。必须传递自己。定义一个数组，获得自己的父亲，在获得自己父亲的所有儿子（包括自己）。遍历所哟与的儿子，只要不是自己就放进数组中。


	只需要明白两个属性（！！！重点！！！）
	parentNode   和  children  这两个属性。

52.DOM节点操作 （！！！！！重点！！！！！）
节点的访问关系都是属性。节点的操作都是函数或者方法。

创建节点
	使用方法是这样的document.createElement();
	新的标签（节点） = document.createElement(“标签名”);
插入节点（使用节点）
	使用方法： 父节点.appendChild();
	父节点.appendChild(新节点); 父节点的最后插入一个新节点

	使用方法：父节点.insertBefore(要插入的节点，参考节点)；
	父节点.insertBefore(新节点,参考节点)在参考节点前插入;
删除节点   
	用法：用父节点删除子节点。
	父节点.removeChild（子节点）；必须制定要删除的子节点
	节点自己删除自己：
	不知道父级的情况下，可以这么写：node.parentNode.removeChild(node)
复制节点 （    oldNode.cloneNode（true）  ）
	想要复制的节点调用这个函数cloneNode()，得到一个新节点。 方法内部可以传参，如果是true，深层复制，如果是false，只复制节点本身。
	新节点=要复制的节点.cloneNode(参数) ; 参数可选复制节点
	用于复制节点， 接受一个布尔值参数， true 表示深复制（复制节点及其所有子节点）， false 表示浅复制（复制节点本身，不复制子节点）
节点属性
	获取：getAttribute(名称)
	设置：setAttribute(名称, 值)
	删除：removeAttribute(名称)
	注意：IE6、7不支持。
	调用者：节点。   有参数。   没有返回值。
	每一个方法意义不同。

transform：translate(-50%,0);向左移动盒子自身的一半。

53.日期对象
推荐方法
	1．var date1 = new Date(); 本地时间。
	2．设定制定时间：（兼容最强）
		var date2 = new Date("2016/01/27 12:00:00")
不推荐的方法
	var date3 = new Date('Wed Jan 27 2016 12:00:00 GMT+0800 (中国标准时间)');
	var date4 = new Date(2016, 1, 27);
获取日期和时间
	getDate()                 获取日 1-31
	getDay ()                 获取星期 0-6（0代表周日）
	getMonth ()               获取月 0-11（1月从0开始）
	getFullYear ()	           获取完整年份（浏览器都支持）
	getHours ()	              获取小时 0-23
	getMinutes ()	              获取分钟 0-59
	getSeconds ()	              获取秒  0-59
	getMilliseconds ()          获取毫秒 （1s = 1000ms）
	getTime ()	              返回累计毫秒数(从1970/1/1午夜)
返回距离1970/01/01毫秒数
	1．var date = Date.now();
	2．var date = +new Date();
	3．var date = new Date().getTime();  最常用
	4．var date = new Date().valueOf();

定时器种类
	1．setInterval()：间隔循环；  （像闹钟）（今天内容）
			循环定时器（每隔固定的时间执行一次）
	2．setTimeout()：定时一次；（像定时炸弹）
循环定时器（setInterval()）定时器是一个函数
	调用者：window。   有参数（一个函数，毫秒值（间隔时间））
	有返回值。          间隔执行一个函数用的。
	定时器的名字 = window.setInterval(函数名，毫秒值);
定义方法
	1．setInterval(fn,1000);   比较好理解，简单明了。不能执行带参函数。
	2．setInterval("fn()",1000);  兼容性不好，self.setInterval("fn()",1000)
	3．setInterval(function (){},1000);   用的最多（匿名函数法）

技术点：C3旋转盒子：盒.style.webkitTransform=rotate(45deg））
      兼容火狐：盒子.style.MozTransform=rotate(45deg);

	  
54. 运算符有哪些
	一元操作符 ++， --  +  -（正负）
	逻辑操作符 ! && ||
	基本运算符 +, -, *, /, %
	关系操作符 >, <, >=, <=, ===, ==, !=, !==
	条件操作符 （三元运算符）  ? :
	赋值运算符 +=, -=, *=, /=, %=   =
	逗号运算符 ,  
运算符优先级
	1 () 
	2 !、-（负数）、++、-- （正数省略+）（一元运算）
	3 *、/、% 
	4 +、- （加，减）（二元运算）
	5 <、<=、<、>= （一级逻辑运算）
	6 ==、!=、===、!==、 （二级逻辑运算）
	7 && （三级级逻辑运算）
	8 || 
	9?: （三元运算）
	10 =、+=、-=、*=、/=、%= （赋值运算）
 

逻辑运算链接两个数字或者字符串。
	&& 
		1、如果是两个布尔类似的。
				有一个是假就是假。
		2、如果链接的两个值是字符串或者数字。
		a、如果有0，结果是0。            0 && 3； 值为0。
		b、如果没有0。取值取后面那个。    1 && 2； 值为2。
	||
		1、如果是两个布尔类型。
				 有一个是真就是真。
		2、如果链接的两个值是字符串或者数字。
		c、如果一个是0，一个不是0，结果是非0的。    0 || 3； 值为3。
		d、如果没有0。取值取前面那个。    1 && 2； 值为1。


55.String
字符串转换
	1．字符串 = 变量+“”;
	2．字符串 = String(变量)；
	3．字符串 = 变量.toString()；  (任何简单类型)    
	注意：
				Number类型：
	该进制值 = 十进制.toString（进制）
	十进制值 = window.parseInt(数值，进制);
		  区别于：String类型中的toString()
给索引查字符
	在一个字符串中，给定他的索引，查找（返回）对应的字符。
charAt，获取相应位置字符（参数： 字符位置）
	返回的字符 = str.charAt(索引)。获得索引处的字符。
	注释：字符串中第一个字符的下标是 0。如果参数 index 不在 0 与 string.length 之间，该方法将返回一个空字符串。

charCodeAt获取相应位置字符编码（参数： 字符位置）
	编码值 = str.charCodeAt(索引);指定位置的字符对应的编码值
charAt()方法和charCodeAt()方法用于选取字符串中某一位置上的单个字符
	区别：charCodeAt()方法，它并不返回指定位置上的字符本身，而是返回该字符在Unicode字符集中的编码值
给字符查索引
	从后往前找，找到这个字符后，还是从前往后找他的索引值。
indexOf，从前向后索引字符串位置（参数： 索引字符串）
	索引值 = str.indexOf(字符); 从前往后查找。
	从前面寻找第一个符合元素的位置。有多个返回值为第一个。
lastIndexOf，从后向前索引字符串位置（参数：索引字符串）
	索引值 = str.lastIndexOf(字符); 从后往前查找。
	从后面寻找第一个符合元素的位置
	找不到则返回 -1
编码和解码
URI (Uniform ResourceIdentifiers,通用资源标识符)进行编码，以便发送给浏览器。有效的URI中不能包含某些字符，
例如空格。而这URI编码方法就可以对URI进行编码，它们用特殊的UTF-8编码替换所有无效的字符，从而让浏览器能够接受和理解。

	encodeURIComponent() 函数可把字符串作为 URI 组件进行编码
	decodeURIComponent() 函数可把字符串作为 URI 组件进行解码
	var url = "http://www.itcast.cn?name=supperBrother&password=shuai";
	//编码：将非标准字符全部编码
	var enUrl = encodeURIComponent(url);//encodeURI(url); 
	//解码：转换为原始形式
	var deUrl = decodeURIComponent(enUrl);//decodeURI(enUrl);

字符串操作
concat，连接字符串（参数： 追加字符串，可以多个）
	返回一个字符串 = str1.concat(str2); 把str1和str2链接起来
slice，截取字符串（参数：1，截取位置【必须】，2终结点）
	字符串 = str.slice（参数1，参数2); 两个参数都是索引值。
	(1).（2,5）  正常包左不包右。
	(2).  ( 2 )   从指定的索引位置剪到最后。
	(3).（-3）   从倒数第几个剪到最后.
	(4).（5,2）  前面的大，后面的小，空。

substr，截取字符串（参数：1，截取位置【必须】，2截取长度）
	字符串 = str.substr（参数1，参数2); 1索引值,2长度。
		第一个参数为从索引位置取值，第二个参数返回字符长度。
	(1).  （2,4）    从索引值为2的字符开始，截取4个字符。
	(2).  （1）     一个值，从指定位置到最后。
	(3).  （-3）    从倒数第几个剪到最后.
              （4）不包括前大后小的情况。
substring 同slice
	字符串 = str.substring（参数1，参数2); 两个参数都是索引值。
	  不同1：参数智能调转位置。
	  不同2：参数负值，将全部获取字符串。
	   （1）.（2,5）   正常包左不包右。
	(2).   ( 2 )    从指定的索引位置剪到最后。
	(3).  （-3）   获取全部字符串.
	(4).  （5,2）   前面的大，后面的小，不是空。（2,5）



转换大小写
	toUpperCase，转换为大写（参数： 无）
	STR = str.toUpperCase(); 转换成大写
	toLowerCase，转换为小写（参数：无）
	str = STR.toLowerCase(); 转换成小写

Number和Math
 Number
	number.toFixed(几位);四舍五入保留
Math
	Math.random();   (0-1随机数值)
	Math.round();      (四舍五入取整)
	Math.max();        (最大值和NaN)
	Math.max(1,3,"12ab")；Math.max(1,2,NaN)；Math.max(1,2,undefined);  NaN
	Math.max(1,3,"12")；Math.max(1,3,null)；    12  3
	Math.max(1,2,3);    3

56.setTimeout(函数名，毫秒值)：定时只执行一次；
arguments.callee == 函数名==函数体（不是执行这个函数）
arguments.length == 实参的长度。
arguments == 实参数组。 
arguments.callee == 所在的函数体。 == 调用函数名。(和this类似)

定时器补充
	定时器是有返回值的。返回值为定时器名。
	 var  name1 =  setInterval(fn,1000); 
	 var  name2 =  setTimeout(fn,1000); 
	（定时器数据类型为：对象（复杂类型））
清除定时器:(要用定时器，先清定时器)
	clearInterval(定时器名)   （被清除后，不在循环执行）
	clearTimeout(定时器名)   （被清除后，如果时间没到，不执行定时器了）

1、技术点：window.location.href = “http://www.itcast.cn”;
2、递归。（函数自己调用自己，就叫做递归。）
       递归必须有跳出跳跃，要不然会出现死循环。（必须配备跳出条件）


57.
基本类型 number, string, boolean
复合类型:
// Array, Date, Number, String, Boolean, Object
// RegExp, Math, Function


//			// in
//			// 语法:   boolen "name" in Object
			var o = { name: "jim" };
			var s1 = "age";
			var s2 = "name";
			console.log(s1 in o);
			console.log(s2 in o);
//			// 判断对象有某属性成员还可以怎么处理?
//			if ( s1 in o ) {}
//			
//			var has = false;
//			for ( var k in o ) {
//				if ( k == s1 ) {
//					has = true;
//					break;
//				}
//			}
//			// 对象就是键值对的集合
//			
//			// 浏览器能力检查的代码
//			if ( document.getElementsByClassName ) {
//				// 有该方法
//			} else {
//				// 没有该方法
//			}
//			
//			if ( o.age ) {
//				
//			}
//			// 
//			var s3 = "age";
//			// 如果希望使用 s3 来判断 对象 o 是否有 该属性
//			if ( o[ s3 ] ) {	// 关联数组
//				
//			}

			// 创建对象可以使用 new 与 直接量( 字面量  )
			
			// 重要: 值类型与引用类型
			// 按值传递: 将变量中的数据完整的拷贝一份, 赋值给新的变量
//			var num = 123;
//			var num2 = num;
//			// 此时内存中有两个 123 的副本
//			console.log("num = " + num + ", num2 = " + num2);
//			num = 1;
//			console.log("num = " + num + ", num2 = " + num2);
//			
//			
//			// 引用类型表示变量存储的是数据的地址( 引用 )
//			var o = { n: 123 };
//			var o2 = o;
			// 内存中只有一个数据对象, 是将 o 中地址复制一份, 赋值给 o2
			// 即 o2 和 o 同时指向数据
			// 
//			console.log("o.n = " + o.n + ", o2.n = " + o2.n);
//			o.n = 1;
//			console.log("o.n = " + o.n + ", o2.n = " + o2.n);


				num = num || "没有参数";
				console.log( num );
				// 真 && ...
				
				// ||
				// 如果第一个为真 就返回第一个表达式, 如果为假 则返回第二个表达式
				// &&
				// 如果第一个为假 就返回第一个表达式, 如果为真则返回第二个表达式
				
				// 表达式1 && 表达式2 && 表达式1
				// 
				// 先验证是否满足 表达式1 如果满足 就执行表达式2 的验证
				// 验证如果失败返回 假
				// 验证如果成功返回 表达式1
				
// delete 删除
			// 语法:  boolean  delete 数据;
			// 在当前作用域上删除数据
			
			// 用法:
			// 1, 删除数组中的一个元素
			// 2, 删除一个对象的属性或方法
			// 3, 删除一个没有用 var 声明 变量
			
			/*
			var arr = [ 1, 2, 3, 4 ];
			console.log( arr );
			console.log( arr.length )
			var isTrue = delete arr[ 2 ];
			console.log( arr );
			console.log( arr.length )
			*/
			
		
//			var o = { name: "jim" };
//			var isTrue = delete o.name;  // o[ "name" ]
//			console.log(o.name);
//			console.log(isTrue);
//		
//			
//			var n = 1;
//				m = 2;
//			var isTrue1 = delete n;
//			var isTrue2 = delete m;
//			
//			console.log( isTrue1 );		// => false 
//			console.log( isTrue2 );     // => true
//			
//			console.log( n );			// => 1
//			console.log( m );			// => undefined				



			// 函数的创建
			/*
			// 1, 声明式 函数
			func();
			function func() {     声明式函数  浏览器加载的时候会把这些声明全部加载到前面 提前加载，所以这里的func();可以写在前面
				console.log( 123 );	
			}                            这之后没有分号 他是全局的
			// js 执行: 预解析, 一句一句执行
			
			// 2, 函数的字面量( 直接量, Lambda 表达式 )
			fn();				加载的时候会把var提前，因为现在fn没有值，是undefined， 所以这个时候的执行结果就是 fn not a function
								如果去掉var，加载到内存 fn 不存在 ， 这样的执行结果会是fn not defined
			var fn = function () {
				
			};
			// 此时函数作为 表达式 存在
			// 凡是将数据 和 运算符等联系起来有值的式子就是表达式
			// 1, 1+2, new Date(), function () {}
			
			// 3, new Function


 声明式函数不允许出现在表达式中
			
/*			if ( true ) {
				console.log(1);
				function f() {  				//浏览器执行这的时候看都不看他 ， 他已经提前加载到前面去了  忽略了 忽略声明 不执行
					console.log( 123 );
				}
				console.log(2);
			}
			f();
			*/
//			
//			func();
//			var f = function func() {   函数声明转化为了函数表达式
//				
//			};


58 面向对象

			// 写一个学生 Student, 要求有 姓名性别年龄和课程分数(语文, 数学, 英语)
			// 和说话的方法	
//			var Student = {
//				
//			};

			/*
			var Student = function ( name, age, gender, math, chinese, english ) {
				this.name = name;
				this.age = age;
				this.gender = gender;
				this.math = math;
				this.chinese = chinese;
				this.english = english;
				this.sayHello = function () {
					alert( this.name );
				};
			};
			var stu1 = new Student( '李四', 18, '男', 90, 95, 80 );
			
			stu1.sayHello();
			*/
			
			
			
			
			// 学员的改良版本  scores是一个Json对象
			var Student = function ( name, scores ) {
				this.name = name;
				this.scores = scores;
				
				// this.math = scores.math;
				
				this.sayHello = function () {
					
					alert ( "你好, 我是 " + this.name +
							", 我考试的分数分别是: 数学 = " + this.scores.math + 
							", 语文 = " + this.scores.chinese + 
							", 英语 = " + this.scores.english );
				};
			}
			
			var stu2 = new Student( '张三', {
				math: 90,
				english: 80,
				chinese: 85
			} );
			
			stu2.sayHello();
			
// 对象中有一个属性 叫 __proto__
			// 通过调试可以发现 对象的 __proto__ 与创建它的构造函数的 prototype 是有一个东西
			
			function F() {}
			var o = new F();
			
			console.log( o.__proto__ === F.prototype );
			
			// __proto__ 是非标准属性
			
			// 原型
			
			// F.prototype			原型属性
			// o.__proto__			原型对象
			
			// F.prototype 是构造函数 F 的原型属性
			// F.prototype 是对象 o 的原型对象
			
			// 在访问一个对象的属性的时候, 首先在当前对象中找, 如果没有在其原型对象中找
			
			
			var fn1 = function () {};
			var fn2 = function () {};
			
			var f1 = new fn1();
			
			// fn1.prototype 是 f1 的原型对象

























